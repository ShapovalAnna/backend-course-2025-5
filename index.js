const superagent = require("superagent");
const http = require("http");
const fs = require("fs");
const path = require("path");
const { program } = require("commander");

// === 1. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ ===
program
  .requiredOption("-h, --host <host>", "server host address")
  .requiredOption("-p, --port <port>", "server port number")
  .requiredOption("-c, --cache <path>", "path to cache directory");

program.parse(process.argv);
const options = program.opts();

// === 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–µ—à—É ===
if (!fs.existsSync(options.cache)) {
  fs.mkdirSync(options.cache, { recursive: true });
  console.log(`‚úÖ Cache directory created at: ${options.cache}`);
} else {
  console.log(`üìÅ Using existing cache directory: ${options.cache}`);
}

// === 3. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ ===
const getFilePath = (code) => path.join(options.cache, `${code}.jpg`);

// === 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ ===
const server = http.createServer(async (req, res) => {
  const method = req.method;
  const urlParts = req.url.split("/");
  const code = urlParts[1]; // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /200 ‚Üí "200"

  if (!code) {
    res.writeHead(400, { "Content-Type": "text/plain; charset=utf-8" });
    return res.end("‚ùå Bad Request: no code provided");
  }

  const filePath = getFilePath(code);

  try {
    switch (method) {
      // === GET ===
case "GET": {
  try {
    // —Å–ø—Ä–æ–±–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª —ñ–∑ –∫–µ—à—É
    const data = await fs.promises.readFile(filePath);
    res.writeHead(200, { "Content-Type": "image/jpeg" });
    res.end(data);
  } catch (err) {
    console.log(`‚ö†Ô∏è Not in cache. Fetching from https://http.cat/${code}.jpg ...`);
    try {
      // –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ https://http.cat
      const response = await superagent.get(`https://http.cat/${code}.jpg`).responseType("blob");

      const buffer = response.body; // –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      await fs.promises.writeFile(filePath, buffer);

      // –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç—É
      res.writeHead(200, { "Content-Type": "image/jpeg" });
      res.end(buffer);
      console.log(`‚úÖ Cached and sent image for code ${code}`);
    } catch (fetchError) {
      // —è–∫—â–æ http.cat –Ω–µ –º–∞—î —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏
      res.writeHead(404, { "Content-Type": "text/plain; charset=utf-8" });
      res.end("‚ùå Not Found on server or cache");
      console.error(`‚ùå Failed to fetch https://http.cat/${code}.jpg`);
    }
  }
  break;
}

      // === PUT ===
      case "PUT": {
        let body = [];
        req.on("data", (chunk) => body.push(chunk));
        req.on("end", async () => {
          const buffer = Buffer.concat(body);
          await fs.promises.writeFile(filePath, buffer);
          res.writeHead(201, { "Content-Type": "text/plain; charset=utf-8" });
          res.end("‚úÖ Image saved to cache");
        });
        break;
      }

      // === DELETE ===
      case "DELETE": {
        try {
          await fs.promises.unlink(filePath); //–≤–∏–ª—É—á–µ–Ω–Ω—è —Ñ–∞–π–ª—É
          res.writeHead(200, { "Content-Type": "text/plain; charset=utf-8" });
          res.end("üóëÔ∏è Image deleted from cache");
        } catch (err) {
          res.writeHead(404, { "Content-Type": "text/plain; charset=utf-8" });
          res.end("‚ùå Not Found: cannot delete non-existing file");
        }
        break;
      }

      // === –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ ===
      default: {
        res.writeHead(405, { "Content-Type": "text/plain; charset=utf-8" });
        res.end("‚ùå Method Not Allowed");
      }
    }
  } catch (err) {
    res.writeHead(500, { "Content-Type": "text/plain; charset=utf-8" });
    res.end("Internal Server Error");
  }
});

// === 5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
server.listen(options.port, options.host, () => {
  console.log(`üöÄ Server running at http://${options.host}:${options.port}/`);
});
